@page "/database"
@using BlazorApp.Client.Data
@using BlazorApp.Client.Models
@using BlazorApp.Client.Pages.Components
@using BlazorApp.Client.Services
@using Microsoft.AspNetCore.Components.QuickGrid
@using Newtonsoft.Json
@inject HttpClient Http
@inject NavigationManager NavMan

<div class="container-fluid p-0 m-0">
	<div class="row w-100 d-inline-flex mb-2" style="background-color:navy">
		<div class="col-sm-11 d-flex justify-content-center" style="padding-top:0.6em">
			<h3 style="color:white">Database Demo (Records:&nbsp;@RowIndex.ToString()) &nbsp;</h3>
		</div>
		<div class="col-sm-1 d-flex justify-content-end" style="padding-top:0.7em">
			<button class="btn-link" style="background-color:transparent;border-color:transparent"
					@onclick=HelpClick>
				<sup><i class="bi bi-info-circle" style="font-size: 2rem; color: white;"></i></sup>
			</button>
		</div>
	</div>
	<div class="row w-100 d-inline-flex mb-2" style="background-color:navy">
		<div class="col align-middle d-sm-inline-flex w-100 d-flex justify-content-center border-bottom p-1" style="height:auto;background-color:gainsboro">
			<sup style="margin-top:4px">
				<i class="bi bi-info-circle ps-2 h5"
				   style="color:blue; font-weight: bold; cursor:grab"
				   @onclick="() => InfoClick()">
				</i>
			</sup>
			&nbsp;&nbsp;
			<SearchBox SearchQueryChanged="ValueChanged" SearchQuery=@Filter />
		</div>
	</div>

	@if (SearchParamError.Length > 0)
	{
		<div class="alert alert-danger alert-dismissible mt-2" role="alert" style="height:auto;color:black;font-weight:700;">
			<span class="oi oi-warning" style="font-size:1.5em;color:red" aria-hidden="true"></span>
			&nbsp;@SearchParamError.ToString()
		</div>
	}
	@if (ShowPersonModal)
	{
		<div id="personModal" class="modal" tabindex="-1" style="display:block" role="dialog">
			<div class="modal-dialog  modal-sm">
				<div class="modal-content">
					<EditForm id="personForm" Model="@SelectedPerson" OnSubmit="@OnSubmitPerson">
						<DataAnnotationsValidator />
						<div class="modal-header @ModalHeaderColour text-white">
							<div class="row">
								<h3 class="modal-title">
									@ModalTitleCaption
								</h3>
							</div>
						</div>
						<div class="modal-body" style="background-color:gainsboro">
							@if (PersonModalDangerMessage.Length > 0)
							{
								<div class="alert alert-danger" role="alert">
									@PersonModalDangerMessage;
								</div>
							}
							<label class="control-label mt-2">Title (Click to select)</label>
							<InputSelect class="form-select" @bind-Value="SelectedPerson.Title">
								<option value="">@SelectString</option>
								<option value="Mr">Mr</option>
								<option value="Mrs">Mrs</option>
								<option value="Ms">Ms</option>
								<option value="NotStated">Not Stated</option>
							</InputSelect>
							<ValidationMessage For="@(() => SelectedPerson.Title)" />

							<label class="control-label mt-2">Last Name</label>
							<InputText id="LastName" class="form-control" @bind-Value="SelectedPerson.LastName" />
							<ValidationMessage For="@(() => SelectedPerson.LastName)" />

							<label class="control-label mt-2">Middle Name</label>
							<InputText id="MiddleName" class="form-control" @bind-Value="SelectedPerson.MiddleName" />

							<label class="control-label mt-2">First Name</label>
							<InputText id="FirstName" class="form-control" @bind-Value="SelectedPerson.FirstName" />
							<ValidationMessage For="@(() => SelectedPerson.FirstName)" />

							<label class="control-label mt-2">Company Name</label>
							<InputText id="CompanyName" class="form-control" @bind-Value="SelectedPerson.CompanyName" />
							<ValidationMessage For="@(() => SelectedPerson.CompanyName)" />

							<label class="control-label mt-2">Phone</label>
							<InputText id="Phone" class="form-control" @bind-Value="SelectedPerson.Phone" />
							<ValidationMessage For="@(() => SelectedPerson.Phone)" />

							<label class="control-label mt-2">Email Address</label>
							<InputText id="EmailAddress" class="form-control" @bind-Value="SelectedPerson.EmailAddress" />
							<ValidationMessage For="@(() => SelectedPerson.EmailAddress)" />

							<label class="control-label mt-2">Modified Date</label>
							<label class="form-control" readonly>@SelectedPerson.ModifiedDate.ToString("HH:mm ddd dd MMM yyyy")</label>
							<label class="control-label mt-2">ID</label>
							<label class="form-control" style="height:auto" readonly>@SelectedPerson.Id.ToString()</label>

						</div>
						<div class="modal-footer" style="background-color:silver">
							<div class="col d-flex justify-content-start">
								<button type="submit" class="btn btn-success">
									Save
								</button>
							</div>

							<div class="col d-flex justify-content-end">
								<button type="button" class="btn alert-primary"
										@onclick="HidePersonModalClick">
									Cancel
								</button>
							</div>
						</div>
					</EditForm>
				</div>
			</div>
		</div>
	}
	@if (ShowHelpModal)
	{
		<div class="modal" tabindex="-1" style="display:block;" role="dialog">
			<div class="modal-dialog modal-sm">
				<div class="modal-content">
					<div class="modal-header" style="background-color:Navy;color:white">
						<h3 class="modal-title">
							Help
						</h3>
					</div>
					<div class="modal-body">
						<h4>Alternative Display of Help</h4>
						<p>
							By placing a <i class="bi bi-info-circle"></i> button close to the search box, the user is given a context cue that help is offered when searching
						</p>
						<p>
							The main help will be found by clicking the <i class="bi bi-info-circle"></i> button in the blue band - top right. 
						</p>
						<p>
							This help-variation is an option that could be used where important guidance needs to be reinforced.
						</p>
					</div>
					<div class="modal-footer" style="background-color:gainsboro">
						<button type="button" class="btn btn-primary"
								@onclick="HideHelpModalClick">
							Close
						</button>
					</div>
				</div>
			</div>
		</div>
	}
	@if (ShowErrorModal)
	{
		<div class="modal" tabindex="-1" style="display:block;" role="dialog">
			<div class="modal-dialog small">
				<div class="modal-content">
					<div class="modal-header" style="background-color:firebrick;color:white">
						<h3 class="modal-title">
							Error
						</h3>
					</div>
					<p>
						@ErrorMessage.ToString()
					</p>
					<div class="modal-footer">
						<button type="button" class="btn btn-primary"
								@onclick="HideHelpModalClick">
							Close
						</button>
					</div>
				</div>
			</div>
		</div>
	}
	@if (ShowDeleteModal)
	{
		<div class="modal" tabindex="-1" style="display:block;" role="dialog">
			<div class="modal-dialog modal-sm">
				<div class="modal-content">
					<div class="modal-header" style="background-color:red;color:white">
						<h3 class="modal-title">
							Delete
						</h3>
					</div>
					<div class="modal-body">
						<h4>Do you want to permanently delete the record for...</h4> <br />
						<div class="form-row">
							<h4>@SelectedPerson.FirstName&nbsp;@SelectedPerson.LastName?</h4>
						</div>
						<br />
						<div class="form-row">
							<h5>ID:&nbsp;@SelectedPerson.Id</h5>
						</div>
					</div>
					<div class="modal-footer">
						<label>Note: this is a demo deletion.  Next time the form opens, all the demo data will re-appear</label>
						<div class="col d-flex justify-content-start">
							<button type="button" class="btn btn-danger ml-2" style="width:5em"
									@onclick="() => DeleteSelectedPerson(SelectedPerson.Id.ToString())">
								Yes
							</button>
						</div>
						<div class="col d-flex justify-content-end">
							<button type="button" class="btn btn-primary" style="width:5em"
									@onclick="HideDeleteModalClick">
								Cancel
							</button>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
	@if (IsLoading)
	{
		<div style="left:50%; top:50%; margin-left-4em;display: block; position: fixed;z-index: 1031">
			<img src=@("/ajax-loader.gif") />
		</div>
	}

	<!--Table-->
	<table class="table table-striped table-responsive w-100 d-block d-md-table">
		<thead class="thead-dark sticky-top">
			<tr class="row" style="display:none;">
				@(RowIndex = 0)
			</tr>
			<tr>
				<th></th>
				<th style="text-align:left" scope="col">
					<button class="btn btn-success" type="button"
							style="width:5em" @onclick="() => PersonButtonClick(Guid.Empty)">
						<!--Empty guid signals new record-->
						New
					</button>
				</th>
				<th style="text-align:center" scope="col">ID</th>
				<th style="text-align:center" scope="col">Company Name</th>
				<th style="text-align:center" scope="col">Last Name</th>
				<th style="text-align:center" scope="col">First Name</th>
				<th style="text-align:center" scope="col">Title</th>
				<th style="text-align:center" scope="col">Phone (fictitious)</th>
				<th style="text-align:center" scope="col">Email (fictitious)</th>
				<th style="text-align:center" scope="col">Date Modified</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach (Person person in FilteredList)
			{
				// Skips the rest of the statements and continues with the next iteration of the loop.
				if (!IsVisible(Filter, person.SearchTerms)) continue;
				<tr>
					<td class="align-middle" style="width:1em">
						@(++RowIndex)
					</td>
					<td>
						<button class="btn btn-primary" type="button" @onclick="() => PersonButtonClick(person.Id)"
								style="width:5em">
							Edit <!--presence of person.Id signals an edit operation-->
						</button>
					</td>
					<td style="width:12em">@person.Id.ToString()</td>
					<td>@person.CompanyName</td>
					<td>@person.LastName</td>
					<td>@person.FirstName</td>
					<td>@person.Title</td>
					<td>@person.Phone</td>
					<td><a href="mailto:@person.EmailAddress.ToString()">@person.EmailAddress</a></td>
					<td style="text-align:center">@person.ModifiedDate.ToString("HH:mm ddd dd MMM yyyy")</td>
					<td style="text-align:center">
						<button class="btn btn-danger" type="button" @onclick="() => DeleteClick(person.Id.ToString())"
								style="width:5em">
							Delete
						</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
	<!--Nav to top button-->
	<div class="mt-4">
		<a class="btn btn-sm btn-info" href="javascript: document.body.scrollIntoView(true);"><i class="bi bi-arrow-up"></i>Back to Top</a>
	</div>
	<!--Help-->
	<div class="offcanvas offcanvas-end @ShowHelp" tabindex="-1" id="offcanvasExample"
		 aria-labelledby="offcanvasExampleLabel"
		 aria-modal="true" role="dialog" style="visibility: visible;background-color:gainsboro">
		<div class="offcanvas-header">
			<h5 class="offcanvas-title" id="offcanvasExampleLabel">Database Help</h5>
			<button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close" @onclick=HideHelpClick></button>
		</div>
		<div class="offcanvas-body">
			<div>
				<h5>
					Search
				</h5>
				<p>
					Entering a few characters into the search box will result in the list of people being filtered to records that contain the
					phrase anywhere within the each.  The search is not case sensitive.  If you paste in a string, be careful you don't include a trailing space.
				</p>
				<h5>Limits to Editing</h5>
				<p>
					Although the Save button implies that you will be changing and saving a record, the changes only last until you close the page.  In a real system these changes would be written back to a web database.
				</p>
				<h5>Intuitive Design</h5>
				<p>
					Our experience shows that staff take to this sort of filter-and-find functionality immediately.
				</p>
				<p>
					Strangely enough, being able to find someone using the first
					three or four digits of their ID turns out to be the preferred method of searching.
				</p>
				<h5>Reduced Training</h5>
				<p>
					Training is the oil of efficiency and should always accompany the
					introduction of a new system.  Covid-19 has shown that
					remote-working is a pragmatic option in a digital society.
					As long as the system uses a consistent design and does not crowd
					forms with buttons galore, intuitive forms like this minise time spent training.
				</p>
				<h5>Accuracy and Immediate Communication</h5>
				<p>
					Being able to correct or bring up-to-date a person's record at the
					touch of a button means that staff can effortlessly keep data in step with reality.
				<p>
					If you have a digital telephone system it might be possible to design the telephone number as a hyperlink which will connect to that number.
					(You may need a licence for this sort of functionality - speak to your telepone service provider).
				</p>
				<p>
					Sending an email by clicking an email address enhances a company's reputation for responsiveness.
					If you are using Outlook, a click with bring up an email with the email address inserted - try it!
				</p>
				<p>
					It is possible to send bulk emails; if you send less than 25,000 a month. they cost nothing
				</p>
				</p>
				<h5>Advantages of Fast Lookup</h5>
				<p>
					At the end of the page there are some notes about the advantages of fast look up.<a class="btn btn-sm btn-outline-info ml-2" href="javascript: document.body.scrollIntoView(false);"><i class="fas fa-arrow-down"></i></a>
				</p>
			</div>
		</div>
	</div>
</div>
@code {
	JsonBlobService jsonBlobService = new();
	bool IsLoading = true;
	bool ShowErrorModal = false;
	string PersonModalDangerMessage = "";
	string ErrorMessage = string.Empty;
	bool ShowPersonModal { get; set; } = false;
	bool ShowHelpModal = false;
	bool ShowDeleteModal = false;
	string SelectString = "Select...";
	string ModalHeaderColour = "bg-success";
	int RowIndex { get; set; }

	List<Person> PersonList = new();
	List<Person> FilteredList = new();

	string? Filter { get; set; } = string.Empty;

	string SearchParamError = string.Empty;
	Person? SelectedPerson { get; set; }
	string ModalTitleCaption = string.Empty;

	string ShowHelp { get; set; } = "";

	protected override async Task OnInitializedAsync()
	{
		IsLoading = true;
		string jsonFile = await Http.GetStringAsync("/api/GetJsonFile?fileName=People.json");
		PersonList = JsonConvert.DeserializeObject<List<Person>>(jsonFile);
		FilteredList = JsonConvert.DeserializeObject<List<Person>>(jsonFile);

		IsLoading = false;
	}

	private bool IsVisible(string SearchTerm, string SearchString)
	{
		try
		{
			//Shows rows that have filter text
			if (string.IsNullOrEmpty(SearchTerm))
			{
				return true;
			}
			if (SearchString.ToLower().Contains(SearchTerm, StringComparison.OrdinalIgnoreCase))
			{
				return true;
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine("IsVisible - Exception: " + ex.Message);
		}
		return false;
	}
	void ShowHelpSearchParamClick()
	{
		ShowErrorModal = false; ErrorMessage = string.Empty;
		ShowHelpModal = true;
	}
	void HideHelpModalClick()
	{
		ShowHelpModal = false;
	}
	void PersonButtonClick(Guid id)  //Could be Edit or New Button
	{
		ShowPersonModal = false;
		if (id == Guid.Empty) //This is a new record
		{
			SelectedPerson = new Person();
			SelectedPerson.ModifiedDate = Globals.GetUKDateTime();
			SelectedPerson.Id = Guid.Empty;  // Signals that this record must be saved
			ModalHeaderColour = "bg-success";
			ModalTitleCaption = "New Person";
		}
		else
		{
			ModalHeaderColour = "bg-primary";
			ModalTitleCaption = "Edit Person";
			Person? person = PersonList.FirstOrDefault(p => p.Id == id);
			if (person == null)
			{
				SelectedPerson = new();
			}
			else
			{
				SelectedPerson = person;
			}
		}
		ShowPersonModal = true;
	}
	void OnSubmitPerson(EditContext context)
	{
		ShowErrorModal = false;
		ErrorMessage = string.Empty;
		bool formIsValid = context.Validate();
		if (formIsValid)
		{
			PersonModalDangerMessage = string.Empty;
		}
		else
		{
			PersonModalDangerMessage = "There are input errors, please check the form";
			return;
		}
		if (SelectedPerson.Title == SelectString)
		{
			PersonModalDangerMessage = "Please select a title";
			return;
		}
		if (SelectedPerson.MiddleName == null)
		{
			SelectedPerson.MiddleName = string.Empty;
		}

		SelectedPerson.ModifiedDate = Globals.GetUKDateTime();

		if (SelectedPerson.Id == Guid.Empty)
		{
			// This is a new record
			SelectedPerson.Id = Guid.NewGuid();
			// Prevent malign attacks
			if (PersonList.Count < 900) // 847 in the json file
			{
				PersonList.Insert(0, SelectedPerson);
				PersonList = PersonList.OrderBy(x => x.LastName).ThenBy(x => x.FirstName).ToList();
				PersonList.Insert(0, SelectedPerson);
			}
		}
		else
		{
			int index = PersonList.FindIndex(x => x.Id == SelectedPerson.Id);
			if (index == -1)
			{
				ErrorMessage = "Can't find person record with the ID: " + SelectedPerson.Id;
				ShowErrorModal = true;
				return;
			}
			PersonList[index] = SelectedPerson;
		}
		HidePersonModalClick();
	}
	void HidePersonModalClick()
	{
		ShowPersonModal = false;
		PersonModalDangerMessage = string.Empty;
	}
	void DeleteClick(string id)
	{
		Person? person = PersonList.Find(p => p.Id.ToString() == id);
		if (person == null)
		{
			ErrorMessage = "Delete Click. Can't find person with ID: " + id;
			ShowErrorModal = true;
			return;
		}
		else
		{
			SelectedPerson = person;
			ShowDeleteModal = true;
		}
	}
	void DeleteSelectedPerson(string id)
	{
		Person? person = PersonList.SingleOrDefault(r => r.Id.ToString() == id);
		if (person == null)
		{
			ErrorMessage = "Delete Selected Person: Can't find selected person with ID: " + id;
			ShowErrorModal = true;
			return;
		}
		else
		{
			PersonList.Remove(person);
		}
		ShowDeleteModal = false;
	}
	void HideDeleteModalClick()
	{
		ShowDeleteModal = false;
	}
	void HelpClick()
	{
		ShowHelp = "show";
	}
	void HideHelpClick()
	{
		// Is the help panel showing?
		if (ShowHelp == "show")
		{
			ShowHelp = "";
		}
	}
	async Task Search(string searchTerm)
	{
		if (string.IsNullOrEmpty(searchTerm))
		{
			FilteredList.Clear();
			FilteredList = PersonList.ToList();
		}
		else
		{
			FilteredList = PersonList.FindAll(x => x.SearchTerms.ToLower().Contains(searchTerm.ToLower())).ToList();			
		}
	}

	public async Task ValueChanged(string AmendedFilter)
	{
		Filter = AmendedFilter;
	}
	public async Task SetFilter()
	{
		Filter = string.Empty;
		ShowHelpModal = true;
	}
	void ClearFilterClick()
	{
		Filter = string.Empty;
		FilteredList.Clear();
		FilteredList = PersonList.ToList();
	}

	void InfoClick()
	{
		ShowHelpModal = true;
	}
}

